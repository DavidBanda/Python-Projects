    LIST-BASED COLLECTIONS

Linked list: A linked list is an array but in each element we store a direction of
memory to the next element. We can add ilimitation elements.

Stack: Is like a linked list but when we add a element, that element will be
the last in out. LIFO (Last In, First Out)

Queue: Is like a stack, but here is FIFO. (First In, First Out)

------------------------------------------------------------------------------------

    SEARCHING AND SORTING

Binary search: when we search in an array, we start comparing our element
with element that is in the middle, if its bigger the element is on the second
array, if its not the element is in the first array. And we do this until we
found the element.

        -----------|---|2^0|2^1|---|2^2|---|---|---|2^3|
       |array size | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 |
       |-----------------------------------------------|
       |iterations | 0 | 1 | 2 | 2 | 3 | 3 | 3 | 3 | 4 |
        -----------------------------------------------

        - Big O: O(|power of 2| + 1 ) = O(log2(n) + 1) = O(log(n)) (for aproximation)
                   |exponent  |               ^
                                              |
          - 2^3 = 8 : log2(8) = 3 -------------


Recursion: You call the same method over and over. You need 3 steps:

            - first step: a function that calls itself.
            - second step: a base case. (exit condition).
            - third step: alter the input parameter at same point.

            Recursion might look and feel really pretty,
            but it isn't always the best way to approach a problem.
            Save it for problems that can be broken into tree like structures.
            When there's a balanced treelike structure, the recursion will
            make things cleaner and faster. We're talking about things like

            - Binary search trees.
            - Merge sort.
            - Quicksort.
            - Searching file structures.

            Recursion is like a boomerang, if the recursion works good,
            all the results gonna go to you again.


BubbleSort: You compare the first element with the second element, if the second element
            is less than the first, you swap that two elements. And continue with
            the second element, you compare the second element with the third, and do
            it again. And you do that until end of array. In the first iteration
            the biggest number go end of array. So Big O is n^2. To get the sort array
            we need to do n^2 comparations. We can transform n^2 in two nested for.

            - Big O(# iterations)(# of comparations) = (n - 1)(n - 1)
                O(n^2 - 2n + 1) = O(n^2)


MergeSort:  You divide an array in two arrays. You do that until each element of the
array gonna be an array with an unique element. Like recursion works like a boomerang,
when the  two first elements back, they gonna be an array with two element, now you
have to sort it and return it, and over and over, until the array gonna be the same at
the start.

            -----------|2^0|2^1|---|2^2|---|---|---|2^3|---|
           |array size | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |
           |-----------------------------------------------|
           |iterations | 0 | 1 | 2 | 2 | 3 | 3 | 3 | 3 | 4 |
            -----------------------------------------------

            - Big O(|#comparations| * #steps) = (n log(n))
                    |per step     |                 ^
                                                    |
            - 2^2 = 4 : log2(4) = 2 -----------------


QuickSort: You take a pivot, normally the last element and compare it with the first
element. If the first element is greater than the last, you take the first element and
put it behind the last element. To do that you take the penultimate element, and put it
where was first element, first element in where was last element and last element
where was the penultimate element. Example:

            - [21, 9, 3, 1, 4, 20, 25, 6, 23, 14]
            - [23, 9, 3, 1, 4, 20, 25, 6, 14, 21]

You do that until all left elements be less than pivot, and all right elements greather
than pivot. You do the same thing with the element left and right until array gonna be
sorted.

------------------------------------------------------------------------------------

    MAPS AND HASHING

Set: A collection of things, but is different to a list. A list has some kind of
ordering for its elements. A set doesnt have that but instead doesnt allow for repeated
elements

Map: Is a set-based data structure. map = <Key, Value>. A group keys is a set. A key only
exist once in a map.

Hash: the purpose of a hash function is to transform some value into one that can be
stored and retrieved easily. You give it some value, it converts the value based on
some formula, and spits out coded version of the value thats often the index in an array

    - Collision: As it turns ut theres a flaw in our elegant system. There are times
    when a hash function will spit out the same hash value for two different inputs.
    This situation is termed a collision.





